
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000728  0000079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000728  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002165  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f8f  00000000  00000000  00002afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eb5  00000000  00000000  00003a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e8  00000000  00000000  00004944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000842  00000000  00000000  00004d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000102d  00000000  00000000  0000556e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  0000659b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c1       	rjmp	.+1004   	; 0x422 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c1       	rjmp	.+988    	; 0x422 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c1       	rjmp	.+972    	; 0x422 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
  5e:	00 00       	nop
  60:	7d c2       	rjmp	.+1274   	; 0x55c <__vector_24>
  62:	00 00       	nop
  64:	de c1       	rjmp	.+956    	; 0x422 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c1       	rjmp	.+948    	; 0x422 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
  72:	00 00       	nop
  74:	d6 c1       	rjmp	.+940    	; 0x422 <__bad_interrupt>
  76:	00 00       	nop
  78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d0 c1       	rjmp	.+928    	; 0x422 <__bad_interrupt>
  82:	00 00       	nop
  84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c8 c1       	rjmp	.+912    	; 0x422 <__bad_interrupt>
  92:	00 00       	nop
  94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c1       	rjmp	.+888    	; 0x422 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c1       	rjmp	.+852    	; 0x422 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c1       	rjmp	.+840    	; 0x422 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
  ec:	00 00       	nop
  ee:	5f 00       	.word	0x005f	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	07 00       	.word	0x0007	; ????
  f8:	07 00       	.word	0x0007	; ????
  fa:	00 00       	nop
  fc:	00 14       	cp	r0, r0
  fe:	7f 14       	cp	r7, r15
 100:	7f 14       	cp	r7, r15
 102:	00 00       	nop
 104:	00 24       	eor	r0, r0
 106:	2a 7f       	andi	r18, 0xFA	; 250
 108:	2a 12       	cpse	r2, r26
 10a:	00 00       	nop
 10c:	00 23       	and	r16, r16
 10e:	13 08       	sbc	r1, r3
 110:	64 62       	ori	r22, 0x24	; 36
 112:	00 00       	nop
 114:	00 36       	cpi	r16, 0x60	; 96
 116:	49 55       	subi	r20, 0x59	; 89
 118:	22 50       	subi	r18, 0x02	; 2
 11a:	00 00       	nop
 11c:	00 00       	nop
 11e:	05 03       	mulsu	r16, r21
 120:	00 00       	nop
 122:	00 00       	nop
 124:	00 1c       	adc	r0, r0
 126:	22 41       	sbci	r18, 0x12	; 18
 128:	00 00       	nop
 12a:	00 00       	nop
 12c:	00 41       	sbci	r16, 0x10	; 16
 12e:	22 1c       	adc	r2, r2
 130:	00 00       	nop
 132:	00 00       	nop
 134:	00 08       	sbc	r0, r0
 136:	2a 1c       	adc	r2, r10
 138:	2a 08       	sbc	r2, r10
 13a:	00 00       	nop
 13c:	00 08       	sbc	r0, r0
 13e:	08 3e       	cpi	r16, 0xE8	; 232
 140:	08 08       	sbc	r0, r8
 142:	00 00       	nop
 144:	00 a0       	ldd	r0, Z+32	; 0x20
 146:	60 00       	.word	0x0060	; ????
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 08       	sbc	r0, r0
 14e:	08 08       	sbc	r0, r8
 150:	08 08       	sbc	r0, r8
 152:	00 00       	nop
 154:	00 60       	ori	r16, 0x00	; 0
 156:	60 00       	.word	0x0060	; ????
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 20       	and	r0, r0
 15e:	10 08       	sbc	r1, r0
 160:	04 02       	muls	r16, r20
 162:	00 00       	nop
 164:	00 3e       	cpi	r16, 0xE0	; 224
 166:	51 49       	sbci	r21, 0x91	; 145
 168:	45 3e       	cpi	r20, 0xE5	; 229
 16a:	00 00       	nop
 16c:	00 00       	nop
 16e:	42 7f       	andi	r20, 0xF2	; 242
 170:	40 00       	.word	0x0040	; ????
 172:	00 00       	nop
 174:	00 62       	ori	r16, 0x20	; 32
 176:	51 49       	sbci	r21, 0x91	; 145
 178:	49 46       	sbci	r20, 0x69	; 105
 17a:	00 00       	nop
 17c:	00 22       	and	r0, r16
 17e:	41 49       	sbci	r20, 0x91	; 145
 180:	49 36       	cpi	r20, 0x69	; 105
 182:	00 00       	nop
 184:	00 18       	sub	r0, r0
 186:	14 12       	cpse	r1, r20
 188:	7f 10       	cpse	r7, r15
 18a:	00 00       	nop
 18c:	00 27       	eor	r16, r16
 18e:	45 45       	sbci	r20, 0x55	; 85
 190:	45 39       	cpi	r20, 0x95	; 149
 192:	00 00       	nop
 194:	00 3c       	cpi	r16, 0xC0	; 192
 196:	4a 49       	sbci	r20, 0x9A	; 154
 198:	49 30       	cpi	r20, 0x09	; 9
 19a:	00 00       	nop
 19c:	00 01       	movw	r0, r0
 19e:	71 09       	sbc	r23, r1
 1a0:	05 03       	mulsu	r16, r21
 1a2:	00 00       	nop
 1a4:	00 36       	cpi	r16, 0x60	; 96
 1a6:	49 49       	sbci	r20, 0x99	; 153
 1a8:	49 36       	cpi	r20, 0x69	; 105
 1aa:	00 00       	nop
 1ac:	00 06       	cpc	r0, r16
 1ae:	49 49       	sbci	r20, 0x99	; 153
 1b0:	29 1e       	adc	r2, r25
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	36 36       	cpi	r19, 0x66	; 102
 1b8:	00 00       	nop
 1ba:	00 00       	nop
 1bc:	00 00       	nop
 1be:	ac 6c       	ori	r26, 0xCC	; 204
 1c0:	00 00       	nop
 1c2:	00 00       	nop
 1c4:	00 08       	sbc	r0, r0
 1c6:	14 22       	and	r1, r20
 1c8:	41 00       	.word	0x0041	; ????
 1ca:	00 00       	nop
 1cc:	00 14       	cp	r0, r0
 1ce:	14 14       	cp	r1, r4
 1d0:	14 14       	cp	r1, r4
 1d2:	00 00       	nop
 1d4:	00 41       	sbci	r16, 0x10	; 16
 1d6:	22 14       	cp	r2, r2
 1d8:	08 00       	.word	0x0008	; ????
 1da:	00 00       	nop
 1dc:	00 02       	muls	r16, r16
 1de:	01 51       	subi	r16, 0x11	; 17
 1e0:	09 06       	cpc	r0, r25
 1e2:	00 00       	nop
 1e4:	00 32       	cpi	r16, 0x20	; 32
 1e6:	49 79       	andi	r20, 0x99	; 153
 1e8:	41 3e       	cpi	r20, 0xE1	; 225
 1ea:	00 00       	nop
 1ec:	00 7e       	andi	r16, 0xE0	; 224
 1ee:	09 09       	sbc	r16, r9
 1f0:	09 7e       	andi	r16, 0xE9	; 233
 1f2:	00 00       	nop
 1f4:	00 7f       	andi	r16, 0xF0	; 240
 1f6:	49 49       	sbci	r20, 0x99	; 153
 1f8:	49 36       	cpi	r20, 0x69	; 105
 1fa:	00 00       	nop
 1fc:	00 3e       	cpi	r16, 0xE0	; 224
 1fe:	41 41       	sbci	r20, 0x11	; 17
 200:	41 22       	and	r4, r17
 202:	00 00       	nop
 204:	00 7f       	andi	r16, 0xF0	; 240
 206:	41 41       	sbci	r20, 0x11	; 17
 208:	22 1c       	adc	r2, r2
 20a:	00 00       	nop
 20c:	00 7f       	andi	r16, 0xF0	; 240
 20e:	49 49       	sbci	r20, 0x99	; 153
 210:	49 41       	sbci	r20, 0x19	; 25
 212:	00 00       	nop
 214:	00 7f       	andi	r16, 0xF0	; 240
 216:	09 09       	sbc	r16, r9
 218:	09 01       	movw	r0, r18
 21a:	00 00       	nop
 21c:	00 3e       	cpi	r16, 0xE0	; 224
 21e:	41 41       	sbci	r20, 0x11	; 17
 220:	51 72       	andi	r21, 0x21	; 33
 222:	00 00       	nop
 224:	00 7f       	andi	r16, 0xF0	; 240
 226:	08 08       	sbc	r0, r8
 228:	08 7f       	andi	r16, 0xF8	; 248
 22a:	00 00       	nop
 22c:	00 41       	sbci	r16, 0x10	; 16
 22e:	7f 41       	sbci	r23, 0x1F	; 31
 230:	00 00       	nop
 232:	00 00       	nop
 234:	00 20       	and	r0, r0
 236:	40 41       	sbci	r20, 0x10	; 16
 238:	3f 01       	movw	r6, r30
 23a:	00 00       	nop
 23c:	00 7f       	andi	r16, 0xF0	; 240
 23e:	08 14       	cp	r0, r8
 240:	22 41       	sbci	r18, 0x12	; 18
 242:	00 00       	nop
 244:	00 7f       	andi	r16, 0xF0	; 240
 246:	40 40       	sbci	r20, 0x00	; 0
 248:	40 40       	sbci	r20, 0x00	; 0
 24a:	00 00       	nop
 24c:	00 7f       	andi	r16, 0xF0	; 240
 24e:	02 0c       	add	r0, r2
 250:	02 7f       	andi	r16, 0xF2	; 242
 252:	00 00       	nop
 254:	00 7f       	andi	r16, 0xF0	; 240
 256:	04 08       	sbc	r0, r4
 258:	10 7f       	andi	r17, 0xF0	; 240
 25a:	00 00       	nop
 25c:	00 3e       	cpi	r16, 0xE0	; 224
 25e:	41 41       	sbci	r20, 0x11	; 17
 260:	41 3e       	cpi	r20, 0xE1	; 225
 262:	00 00       	nop
 264:	00 7f       	andi	r16, 0xF0	; 240
 266:	09 09       	sbc	r16, r9
 268:	09 06       	cpc	r0, r25
 26a:	00 00       	nop
 26c:	00 3e       	cpi	r16, 0xE0	; 224
 26e:	41 51       	subi	r20, 0x11	; 17
 270:	21 5e       	subi	r18, 0xE1	; 225
 272:	00 00       	nop
 274:	00 7f       	andi	r16, 0xF0	; 240
 276:	09 19       	sub	r16, r9
 278:	29 46       	sbci	r18, 0x69	; 105
 27a:	00 00       	nop
 27c:	00 26       	eor	r0, r16
 27e:	49 49       	sbci	r20, 0x99	; 153
 280:	49 32       	cpi	r20, 0x29	; 41
 282:	00 00       	nop
 284:	00 01       	movw	r0, r0
 286:	01 7f       	andi	r16, 0xF1	; 241
 288:	01 01       	movw	r0, r2
 28a:	00 00       	nop
 28c:	00 3f       	cpi	r16, 0xF0	; 240
 28e:	40 40       	sbci	r20, 0x00	; 0
 290:	40 3f       	cpi	r20, 0xF0	; 240
 292:	00 00       	nop
 294:	00 1f       	adc	r16, r16
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	20 1f       	adc	r18, r16
 29a:	00 00       	nop
 29c:	00 3f       	cpi	r16, 0xF0	; 240
 29e:	40 38       	cpi	r20, 0x80	; 128
 2a0:	40 3f       	cpi	r20, 0xF0	; 240
 2a2:	00 00       	nop
 2a4:	00 63       	ori	r16, 0x30	; 48
 2a6:	14 08       	sbc	r1, r4
 2a8:	14 63       	ori	r17, 0x34	; 52
 2aa:	00 00       	nop
 2ac:	00 03       	mulsu	r16, r16
 2ae:	04 78       	andi	r16, 0x84	; 132
 2b0:	04 03       	mulsu	r16, r20
 2b2:	00 00       	nop
 2b4:	00 61       	ori	r16, 0x10	; 16
 2b6:	51 49       	sbci	r21, 0x91	; 145
 2b8:	45 43       	sbci	r20, 0x35	; 53
 2ba:	00 00       	nop
 2bc:	00 7f       	andi	r16, 0xF0	; 240
 2be:	41 41       	sbci	r20, 0x11	; 17
 2c0:	00 00       	nop
 2c2:	00 00       	nop
 2c4:	00 02       	muls	r16, r16
 2c6:	04 08       	sbc	r0, r4
 2c8:	10 20       	and	r1, r0
 2ca:	00 00       	nop
 2cc:	00 41       	sbci	r16, 0x10	; 16
 2ce:	41 7f       	andi	r20, 0xF1	; 241
 2d0:	00 00       	nop
 2d2:	00 00       	nop
 2d4:	00 04       	cpc	r0, r0
 2d6:	02 01       	movw	r0, r4
 2d8:	02 04       	cpc	r0, r2
 2da:	00 00       	nop
 2dc:	00 80       	ld	r0, Z
 2de:	80 80       	ld	r8, Z
 2e0:	80 80       	ld	r8, Z
 2e2:	00 00       	nop
 2e4:	00 01       	movw	r0, r0
 2e6:	02 04       	cpc	r0, r2
 2e8:	00 00       	nop
 2ea:	00 00       	nop
 2ec:	00 20       	and	r0, r0
 2ee:	54 54       	subi	r21, 0x44	; 68
 2f0:	54 78       	andi	r21, 0x84	; 132
 2f2:	00 00       	nop
 2f4:	00 7f       	andi	r16, 0xF0	; 240
 2f6:	48 44       	sbci	r20, 0x48	; 72
 2f8:	44 38       	cpi	r20, 0x84	; 132
 2fa:	00 00       	nop
 2fc:	00 38       	cpi	r16, 0x80	; 128
 2fe:	44 44       	sbci	r20, 0x44	; 68
 300:	28 00       	.word	0x0028	; ????
 302:	00 00       	nop
 304:	00 38       	cpi	r16, 0x80	; 128
 306:	44 44       	sbci	r20, 0x44	; 68
 308:	48 7f       	andi	r20, 0xF8	; 248
 30a:	00 00       	nop
 30c:	00 38       	cpi	r16, 0x80	; 128
 30e:	54 54       	subi	r21, 0x44	; 68
 310:	54 18       	sub	r5, r4
 312:	00 00       	nop
 314:	00 08       	sbc	r0, r0
 316:	7e 09       	sbc	r23, r14
 318:	02 00       	.word	0x0002	; ????
 31a:	00 00       	nop
 31c:	00 18       	sub	r0, r0
 31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
 320:	a4 7c       	andi	r26, 0xC4	; 196
 322:	00 00       	nop
 324:	00 7f       	andi	r16, 0xF0	; 240
 326:	08 04       	cpc	r0, r8
 328:	04 78       	andi	r16, 0x84	; 132
 32a:	00 00       	nop
 32c:	00 00       	nop
 32e:	7d 00       	.word	0x007d	; ????
 330:	00 00       	nop
 332:	00 00       	nop
 334:	00 80       	ld	r0, Z
 336:	84 7d       	andi	r24, 0xD4	; 212
 338:	00 00       	nop
 33a:	00 00       	nop
 33c:	00 7f       	andi	r16, 0xF0	; 240
 33e:	10 28       	or	r1, r0
 340:	44 00       	.word	0x0044	; ????
 342:	00 00       	nop
 344:	00 41       	sbci	r16, 0x10	; 16
 346:	7f 40       	sbci	r23, 0x0F	; 15
 348:	00 00       	nop
 34a:	00 00       	nop
 34c:	00 7c       	andi	r16, 0xC0	; 192
 34e:	04 18       	sub	r0, r4
 350:	04 78       	andi	r16, 0x84	; 132
 352:	00 00       	nop
 354:	00 7c       	andi	r16, 0xC0	; 192
 356:	08 04       	cpc	r0, r8
 358:	7c 00       	.word	0x007c	; ????
 35a:	00 00       	nop
 35c:	00 38       	cpi	r16, 0x80	; 128
 35e:	44 44       	sbci	r20, 0x44	; 68
 360:	38 00       	.word	0x0038	; ????
 362:	00 00       	nop
 364:	00 fc       	sbrc	r0, 0
 366:	24 24       	eor	r2, r4
 368:	18 00       	.word	0x0018	; ????
 36a:	00 00       	nop
 36c:	00 18       	sub	r0, r0
 36e:	24 24       	eor	r2, r4
 370:	fc 00       	.word	0x00fc	; ????
 372:	00 00       	nop
 374:	00 00       	nop
 376:	7c 08       	sbc	r7, r12
 378:	04 00       	.word	0x0004	; ????
 37a:	00 00       	nop
 37c:	00 48       	sbci	r16, 0x80	; 128
 37e:	54 54       	subi	r21, 0x44	; 68
 380:	24 00       	.word	0x0024	; ????
 382:	00 00       	nop
 384:	00 04       	cpc	r0, r0
 386:	7f 44       	sbci	r23, 0x4F	; 79
 388:	00 00       	nop
 38a:	00 00       	nop
 38c:	00 3c       	cpi	r16, 0xC0	; 192
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	7c 00       	.word	0x007c	; ????
 392:	00 00       	nop
 394:	00 1c       	adc	r0, r0
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	20 1c       	adc	r2, r0
 39a:	00 00       	nop
 39c:	00 3c       	cpi	r16, 0xC0	; 192
 39e:	40 30       	cpi	r20, 0x00	; 0
 3a0:	40 3c       	cpi	r20, 0xC0	; 192
 3a2:	00 00       	nop
 3a4:	00 44       	sbci	r16, 0x40	; 64
 3a6:	28 10       	cpse	r2, r8
 3a8:	28 44       	sbci	r18, 0x48	; 72
 3aa:	00 00       	nop
 3ac:	00 1c       	adc	r0, r0
 3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
 3b0:	7c 00       	.word	0x007c	; ????
 3b2:	00 00       	nop
 3b4:	00 44       	sbci	r16, 0x40	; 64
 3b6:	64 54       	subi	r22, 0x44	; 68
 3b8:	4c 44       	sbci	r20, 0x4C	; 76
 3ba:	00 00       	nop
 3bc:	00 08       	sbc	r0, r0
 3be:	36 41       	sbci	r19, 0x16	; 22
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	7f 00       	.word	0x007f	; ????
 3c8:	00 00       	nop
 3ca:	00 00       	nop
 3cc:	00 41       	sbci	r16, 0x10	; 16
 3ce:	36 08       	sbc	r3, r6
 3d0:	00 00       	nop
 3d2:	00 00       	nop
 3d4:	00 02       	muls	r16, r16
 3d6:	01 01       	movw	r0, r2
 3d8:	02 01       	movw	r0, r4
 3da:	00 00       	nop
 3dc:	00 02       	muls	r16, r16
 3de:	05 05       	cpc	r16, r5
 3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
 3e4:	11 24       	eor	r1, r1
 3e6:	1f be       	out	0x3f, r1	; 63
 3e8:	cf ef       	ldi	r28, 0xFF	; 255
 3ea:	d1 e2       	ldi	r29, 0x21	; 33
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	00 e0       	ldi	r16, 0x00	; 0
 3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
 3f4:	12 e0       	ldi	r17, 0x02	; 2
 3f6:	a0 e0       	ldi	r26, 0x00	; 0
 3f8:	b2 e0       	ldi	r27, 0x02	; 2
 3fa:	e8 e2       	ldi	r30, 0x28	; 40
 3fc:	f7 e0       	ldi	r31, 0x07	; 7
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	0b bf       	out	0x3b, r16	; 59
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	07 90       	elpm	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	a2 30       	cpi	r26, 0x02	; 2
 40a:	b1 07       	cpc	r27, r17
 40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	a2 e0       	ldi	r26, 0x02	; 2
 412:	b2 e0       	ldi	r27, 0x02	; 2
 414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
 416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
 418:	a2 30       	cpi	r26, 0x02	; 2
 41a:	b2 07       	cpc	r27, r18
 41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
 41e:	5f d0       	rcall	.+190    	; 0x4de <main>
 420:	81 c1       	rjmp	.+770    	; 0x724 <_exit>

00000422 <__bad_interrupt>:
 422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
 424:	81 b1       	in	r24, 0x01	; 1
 426:	81 60       	ori	r24, 0x01	; 1
 428:	81 b9       	out	0x01, r24	; 1
 42a:	82 b1       	in	r24, 0x02	; 2
 42c:	81 60       	ori	r24, 0x01	; 1
 42e:	82 b9       	out	0x02, r24	; 2
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	83 ed       	ldi	r24, 0xD3	; 211
 434:	90 e3       	ldi	r25, 0x30	; 48
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <I2C_Init+0x12>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <I2C_Init+0x1c>
 440:	00 00       	nop
 442:	82 e1       	ldi	r24, 0x12	; 18
 444:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 448:	e9 eb       	ldi	r30, 0xB9	; 185
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	8c 7f       	andi	r24, 0xFC	; 252
 450:	80 83       	st	Z, r24
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 458:	08 95       	ret

0000045a <I2C_Start>:
 45a:	94 ea       	ldi	r25, 0xA4	; 164
 45c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 460:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 464:	99 23       	and	r25, r25
 466:	e4 f7       	brge	.-8      	; 0x460 <I2C_Start+0x6>
 468:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 46c:	98 7f       	andi	r25, 0xF8	; 248
 46e:	98 30       	cpi	r25, 0x08	; 8
 470:	91 f4       	brne	.+36     	; 0x496 <I2C_Start+0x3c>
 472:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 476:	84 e8       	ldi	r24, 0x84	; 132
 478:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 47c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 480:	88 23       	and	r24, r24
 482:	e4 f7       	brge	.-8      	; 0x47c <I2C_Start+0x22>
 484:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 488:	88 7f       	andi	r24, 0xF8	; 248
 48a:	88 31       	cpi	r24, 0x18	; 24
 48c:	31 f0       	breq	.+12     	; 0x49a <I2C_Start+0x40>
 48e:	80 32       	cpi	r24, 0x20	; 32
 490:	31 f4       	brne	.+12     	; 0x49e <I2C_Start+0x44>
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	08 95       	ret
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	08 95       	ret

000004a2 <I2C_Write>:
 4a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 4a6:	84 e8       	ldi	r24, 0x84	; 132
 4a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4b0:	88 23       	and	r24, r24
 4b2:	e4 f7       	brge	.-8      	; 0x4ac <I2C_Write+0xa>
 4b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 4b8:	88 7f       	andi	r24, 0xF8	; 248
 4ba:	88 32       	cpi	r24, 0x28	; 40
 4bc:	21 f0       	breq	.+8      	; 0x4c6 <I2C_Write+0x24>
 4be:	80 33       	cpi	r24, 0x30	; 48
 4c0:	21 f4       	brne	.+8      	; 0x4ca <I2C_Write+0x28>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	08 95       	ret

000004ce <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 4ce:	84 e9       	ldi	r24, 0x94	; 148
 4d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 4d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4d8:	84 fd       	sbrc	r24, 4
 4da:	fc cf       	rjmp	.-8      	; 0x4d4 <I2C_Stop+0x6>
 4dc:	08 95       	ret

000004de <main>:
#include <util/delay.h>


int main(void)
{
	_i2c_address = 0X78;
 4de:	88 e7       	ldi	r24, 0x78	; 120
 4e0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	initSPI(MASTER);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e d0       	rcall	.+28     	; 0x504 <initSPI>
	I2C_Init();
 4e8:	9d df       	rcall	.-198    	; 0x424 <I2C_Init>
	InitializeDisplay();
 4ea:	4e d0       	rcall	.+156    	; 0x588 <InitializeDisplay>
	print_fonts();
 4ec:	da d0       	rcall	.+436    	; 0x6a2 <print_fonts>
	clear_display();
 4ee:	9e d0       	rcall	.+316    	; 0x62c <clear_display>
 4f0:	83 e7       	ldi	r24, 0x73	; 115
	char temp = 1;
    while(1){
		temp = transmit('s');
 4f2:	22 d0       	rcall	.+68     	; 0x538 <transmit>
 4f4:	88 23       	and	r24, r24
 4f6:	e1 f3       	breq	.-8      	; 0x4f0 <main+0x12>
		if(temp){
 4f8:	40 e0       	ldi	r20, 0x00	; 0
			sendCharXY(temp, 0, 0);
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	a9 d0       	rcall	.+338    	; 0x654 <sendCharXY>
 502:	f6 cf       	rjmp	.-20     	; 0x4f0 <main+0x12>

00000504 <initSPI>:
 504:	78 94       	sei
 506:	81 11       	cpse	r24, r1
#include "./SPILib.h"

/* Replace with your library code */
int initSPI(char role){
	sei();
	if(role == MASTER){
 508:	09 c0       	rjmp	.+18     	; 0x51c <initSPI+0x18>
		DDRB = (1<<PB2)|(1<<PB1)|(1<<PB0); //Sets ss-not, MOSI and SCK to be outputs
 50a:	87 e0       	ldi	r24, 0x07	; 7
 50c:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0);
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<SPR1); //Initiates control register
 512:	8a e5       	ldi	r24, 0x5A	; 90
 514:	8c bd       	out	0x2c, r24	; 44
		return 1;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	08 95       	ret
	}
	else if(role == SLAVE){
 51c:	8f 3f       	cpi	r24, 0xFF	; 255
 51e:	49 f4       	brne	.+18     	; 0x532 <initSPI+0x2e>
		DDRB = (1<<PB3); //Sets MISO as output
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE)|(1<<CPOL); //Initiates control register
 528:	88 e4       	ldi	r24, 0x48	; 72
 52a:	8c bd       	out	0x2c, r24	; 44
		return 1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	08 95       	ret
	}
	return 0;
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
}
 536:	08 95       	ret

00000538 <transmit>:

char transmit(char transmitionCode){
	if((DDRB & 0b00000111) == 0b00000111){ //If this is a master
 538:	94 b1       	in	r25, 0x04	; 4
 53a:	97 70       	andi	r25, 0x07	; 7
 53c:	97 30       	cpi	r25, 0x07	; 7
 53e:	61 f4       	brne	.+24     	; 0x558 <transmit+0x20>
		PORTB &= 0b11111110; //Sets !ss = 0
 540:	95 b1       	in	r25, 0x05	; 5
 542:	9e 7f       	andi	r25, 0xFE	; 254
 544:	95 b9       	out	0x05, r25	; 5
		SPDR = transmitionCode;
 546:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & 0b10000000) != 0b10000000){} //Waits for transmition to finish
 548:	0d b4       	in	r0, 0x2d	; 45
 54a:	07 fe       	sbrs	r0, 7
 54c:	fd cf       	rjmp	.-6      	; 0x548 <transmit+0x10>
		PORTB |= 0b00000001; //Sets !ss = 1
 54e:	85 b1       	in	r24, 0x05	; 5
 550:	81 60       	ori	r24, 0x01	; 1
 552:	85 b9       	out	0x05, r24	; 5
		return SPDR;
 554:	8e b5       	in	r24, 0x2e	; 46
 556:	08 95       	ret
	}
	return 0;
 558:	80 e0       	ldi	r24, 0x00	; 0
}
 55a:	08 95       	ret

0000055c <__vector_24>:

ISR(SPI_STC_vect){
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
	
}
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
 570:	cf 93       	push	r28
 572:	c8 2f       	mov	r28, r24
 574:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 578:	70 df       	rcall	.-288    	; 0x45a <I2C_Start>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	92 df       	rcall	.-220    	; 0x4a2 <I2C_Write>
 57e:	8c 2f       	mov	r24, r28
 580:	90 df       	rcall	.-224    	; 0x4a2 <I2C_Write>
 582:	a5 df       	rcall	.-182    	; 0x4ce <I2C_Stop>
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <InitializeDisplay>:
 588:	8e ea       	ldi	r24, 0xAE	; 174
 58a:	f2 df       	rcall	.-28     	; 0x570 <ssd1306_command>
 58c:	85 ed       	ldi	r24, 0xD5	; 213
 58e:	f0 df       	rcall	.-32     	; 0x570 <ssd1306_command>
 590:	80 e8       	ldi	r24, 0x80	; 128
 592:	ee df       	rcall	.-36     	; 0x570 <ssd1306_command>
 594:	88 ea       	ldi	r24, 0xA8	; 168
 596:	ec df       	rcall	.-40     	; 0x570 <ssd1306_command>
 598:	8f e3       	ldi	r24, 0x3F	; 63
 59a:	ea df       	rcall	.-44     	; 0x570 <ssd1306_command>
 59c:	83 ed       	ldi	r24, 0xD3	; 211
 59e:	e8 df       	rcall	.-48     	; 0x570 <ssd1306_command>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	e6 df       	rcall	.-52     	; 0x570 <ssd1306_command>
 5a4:	80 e4       	ldi	r24, 0x40	; 64
 5a6:	e4 df       	rcall	.-56     	; 0x570 <ssd1306_command>
 5a8:	8d e8       	ldi	r24, 0x8D	; 141
 5aa:	e2 df       	rcall	.-60     	; 0x570 <ssd1306_command>
 5ac:	84 e1       	ldi	r24, 0x14	; 20
 5ae:	e0 df       	rcall	.-64     	; 0x570 <ssd1306_command>
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	de df       	rcall	.-68     	; 0x570 <ssd1306_command>
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	dc df       	rcall	.-72     	; 0x570 <ssd1306_command>
 5b8:	81 ea       	ldi	r24, 0xA1	; 161
 5ba:	da df       	rcall	.-76     	; 0x570 <ssd1306_command>
 5bc:	88 ec       	ldi	r24, 0xC8	; 200
 5be:	d8 df       	rcall	.-80     	; 0x570 <ssd1306_command>
 5c0:	8a ed       	ldi	r24, 0xDA	; 218
 5c2:	d6 df       	rcall	.-84     	; 0x570 <ssd1306_command>
 5c4:	82 e1       	ldi	r24, 0x12	; 18
 5c6:	d4 df       	rcall	.-88     	; 0x570 <ssd1306_command>
 5c8:	81 e8       	ldi	r24, 0x81	; 129
 5ca:	d2 df       	rcall	.-92     	; 0x570 <ssd1306_command>
 5cc:	8f ec       	ldi	r24, 0xCF	; 207
 5ce:	d0 df       	rcall	.-96     	; 0x570 <ssd1306_command>
 5d0:	89 ed       	ldi	r24, 0xD9	; 217
 5d2:	ce df       	rcall	.-100    	; 0x570 <ssd1306_command>
 5d4:	81 ef       	ldi	r24, 0xF1	; 241
 5d6:	cc df       	rcall	.-104    	; 0x570 <ssd1306_command>
 5d8:	8b ed       	ldi	r24, 0xDB	; 219
 5da:	ca df       	rcall	.-108    	; 0x570 <ssd1306_command>
 5dc:	80 e4       	ldi	r24, 0x40	; 64
 5de:	c8 df       	rcall	.-112    	; 0x570 <ssd1306_command>
 5e0:	84 ea       	ldi	r24, 0xA4	; 164
 5e2:	c6 df       	rcall	.-116    	; 0x570 <ssd1306_command>
 5e4:	86 ea       	ldi	r24, 0xA6	; 166
 5e6:	c4 df       	rcall	.-120    	; 0x570 <ssd1306_command>
 5e8:	8f ea       	ldi	r24, 0xAF	; 175
 5ea:	c2 cf       	rjmp	.-124    	; 0x570 <ssd1306_command>
 5ec:	08 95       	ret

000005ee <SendChar>:
 5ee:	cf 93       	push	r28
 5f0:	c8 2f       	mov	r28, r24
 5f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 5f6:	31 df       	rcall	.-414    	; 0x45a <I2C_Start>
 5f8:	80 e4       	ldi	r24, 0x40	; 64
 5fa:	53 df       	rcall	.-346    	; 0x4a2 <I2C_Write>
 5fc:	8c 2f       	mov	r24, r28
 5fe:	51 df       	rcall	.-350    	; 0x4a2 <I2C_Write>
 600:	66 df       	rcall	.-308    	; 0x4ce <I2C_Stop>
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <setXY>:
 606:	cf 93       	push	r28
 608:	c6 2f       	mov	r28, r22
 60a:	80 55       	subi	r24, 0x50	; 80
 60c:	b1 df       	rcall	.-158    	; 0x570 <ssd1306_command>
 60e:	8c 2f       	mov	r24, r28
 610:	88 0f       	add	r24, r24
 612:	88 0f       	add	r24, r24
 614:	88 0f       	add	r24, r24
 616:	88 70       	andi	r24, 0x08	; 8
 618:	ab df       	rcall	.-170    	; 0x570 <ssd1306_command>
 61a:	8c 2f       	mov	r24, r28
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	96 95       	lsr	r25
 620:	87 95       	ror	r24
 622:	8f 70       	andi	r24, 0x0F	; 15
 624:	80 5f       	subi	r24, 0xF0	; 240
 626:	a4 df       	rcall	.-184    	; 0x570 <ssd1306_command>
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <clear_display>:
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	d0 e0       	ldi	r29, 0x00	; 0
 632:	0b c0       	rjmp	.+22     	; 0x64a <clear_display+0x1e>
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	8d 2f       	mov	r24, r29
 638:	e6 df       	rcall	.-52     	; 0x606 <setXY>
 63a:	c0 e0       	ldi	r28, 0x00	; 0
 63c:	03 c0       	rjmp	.+6      	; 0x644 <clear_display+0x18>
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	d6 df       	rcall	.-84     	; 0x5ee <SendChar>
 642:	cf 5f       	subi	r28, 0xFF	; 255
 644:	cc 23       	and	r28, r28
 646:	dc f7       	brge	.-10     	; 0x63e <clear_display+0x12>
 648:	df 5f       	subi	r29, 0xFF	; 255
 64a:	d8 30       	cpi	r29, 0x08	; 8
 64c:	98 f3       	brcs	.-26     	; 0x634 <clear_display+0x8>
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <sendCharXY>:
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	18 2f       	mov	r17, r24
 65c:	86 2f       	mov	r24, r22
 65e:	64 2f       	mov	r22, r20
 660:	d2 df       	rcall	.-92     	; 0x606 <setXY>
 662:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 666:	f9 de       	rcall	.-526    	; 0x45a <I2C_Start>
 668:	80 e4       	ldi	r24, 0x40	; 64
 66a:	1b df       	rcall	.-458    	; 0x4a2 <I2C_Write>
 66c:	c0 e0       	ldi	r28, 0x00	; 0
 66e:	d0 e0       	ldi	r29, 0x00	; 0
 670:	10 c0       	rjmp	.+32     	; 0x692 <sendCharXY+0x3e>
 672:	e1 2f       	mov	r30, r17
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	b0 97       	sbiw	r30, 0x20	; 32
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	ec 51       	subi	r30, 0x1C	; 28
 686:	ff 4f       	sbci	r31, 0xFF	; 255
 688:	ec 0f       	add	r30, r28
 68a:	fd 1f       	adc	r31, r29
 68c:	84 91       	lpm	r24, Z
 68e:	09 df       	rcall	.-494    	; 0x4a2 <I2C_Write>
 690:	21 96       	adiw	r28, 0x01	; 1
 692:	c8 30       	cpi	r28, 0x08	; 8
 694:	d1 05       	cpc	r29, r1
 696:	6c f3       	brlt	.-38     	; 0x672 <sendCharXY+0x1e>
 698:	1a df       	rcall	.-460    	; 0x4ce <I2C_Stop>
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	08 95       	ret

000006a2 <print_fonts>:
void print_fonts(){
 6a2:	df 92       	push	r13
 6a4:	ef 92       	push	r14
 6a6:	ff 92       	push	r15
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
	clear_display();
 6b0:	bd df       	rcall	.-134    	; 0x62c <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
 6b2:	e1 2c       	mov	r14, r1
 6b4:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
 6b6:	68 94       	set
 6b8:	dd 24       	eor	r13, r13
 6ba:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
 6bc:	27 c0       	rjmp	.+78     	; 0x70c <print_fonts+0x6a>
		setXY(k,0);
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	8e 2d       	mov	r24, r14
 6c2:	a1 df       	rcall	.-190    	; 0x606 <setXY>

		for (int j=0;j<16;j++)
 6c4:	00 e0       	ldi	r16, 0x00	; 0
 6c6:	10 e0       	ldi	r17, 0x00	; 0
 6c8:	19 c0       	rjmp	.+50     	; 0x6fc <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
 6ca:	f8 01       	movw	r30, r16
 6cc:	ed 0d       	add	r30, r13
 6ce:	f1 1d       	adc	r31, r1
 6d0:	b0 97       	sbiw	r30, 0x20	; 32
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	ec 51       	subi	r30, 0x1C	; 28
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	ec 0f       	add	r30, r28
 6e4:	fd 1f       	adc	r31, r29
 6e6:	84 91       	lpm	r24, Z
 6e8:	82 df       	rcall	.-252    	; 0x5ee <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
 6ea:	21 96       	adiw	r28, 0x01	; 1
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <print_fonts+0x50>
 6ee:	c0 e0       	ldi	r28, 0x00	; 0
 6f0:	d0 e0       	ldi	r29, 0x00	; 0
 6f2:	c8 30       	cpi	r28, 0x08	; 8
 6f4:	d1 05       	cpc	r29, r1
 6f6:	4c f3       	brlt	.-46     	; 0x6ca <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
 6f8:	0f 5f       	subi	r16, 0xFF	; 255
 6fa:	1f 4f       	sbci	r17, 0xFF	; 255
 6fc:	00 31       	cpi	r16, 0x10	; 16
 6fe:	11 05       	cpc	r17, r1
 700:	b4 f3       	brlt	.-20     	; 0x6ee <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
 702:	80 e1       	ldi	r24, 0x10	; 16
 704:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	e8 1a       	sub	r14, r24
 70a:	f8 0a       	sbc	r15, r24
 70c:	86 e0       	ldi	r24, 0x06	; 6
 70e:	e8 16       	cp	r14, r24
 710:	f1 04       	cpc	r15, r1
 712:	ac f2       	brlt	.-86     	; 0x6be <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	df 90       	pop	r13
 722:	08 95       	ret

00000724 <_exit>:
 724:	f8 94       	cli

00000726 <__stop_program>:
 726:	ff cf       	rjmp	.-2      	; 0x726 <__stop_program>
